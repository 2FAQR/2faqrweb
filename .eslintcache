[{"/Users/slx/Documents/GitHub/2faqrweb/src/App.tsx":"1","/Users/slx/Documents/GitHub/2faqrweb/src/index.tsx":"2","/Users/slx/Documents/GitHub/2faqrweb/src/components/login.tsx":"3","/Users/slx/Documents/GitHub/2faqrweb/src/components/register.tsx":"4","/Users/slx/Documents/GitHub/2faqrweb/src/components/loginqr.tsx":"5","/Users/slx/Documents/GitHub/2faqrweb/src/components/registerQR.tsx":"6","/Users/slx/Documents/GitHub/2faqrweb/src/reportWebVitals.ts":"7","/Users/slx/Documents/GitHub/2faqrweb/src/config.ts":"8","/Users/slx/Documents/GitHub/2faqrweb/src/constants.ts":"9","/Users/slx/Documents/GitHub/2faqrweb/src/components/home.tsx":"10"},{"size":1542,"mtime":1607273075899,"results":"11","hashOfConfig":"12"},{"size":478,"mtime":1606453591945,"results":"13","hashOfConfig":"12"},{"size":2060,"mtime":1607271549480,"results":"14","hashOfConfig":"12"},{"size":2775,"mtime":1607271900622,"results":"15","hashOfConfig":"12"},{"size":2358,"mtime":1607273399537,"results":"16","hashOfConfig":"12"},{"size":2391,"mtime":1607273406216,"results":"17","hashOfConfig":"12"},{"size":425,"mtime":1606452835555,"results":"18","hashOfConfig":"12"},{"size":107,"mtime":1607265923389,"results":"19","hashOfConfig":"12"},{"size":65,"mtime":1606655454756,"results":"20","hashOfConfig":"12"},{"size":474,"mtime":1607271718526,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"uz5q67",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/slx/Documents/GitHub/2faqrweb/src/App.tsx",[],"/Users/slx/Documents/GitHub/2faqrweb/src/index.tsx",[],["45","46"],"/Users/slx/Documents/GitHub/2faqrweb/src/components/login.tsx",["47"],"/Users/slx/Documents/GitHub/2faqrweb/src/components/register.tsx",["48"],"import React from \"react\";\nimport { TextField, Button } from \"@material-ui/core\";\nimport { useHistory } from \"react-router-dom\";\nimport { SERVER_BASE_URL } from \"../config\";\nimport { JWT_TOKEN, USERNAME_KEY } from \"../constants\";\n\nexport interface RegisterResponse {\n  status: string;\n  message: string;\n  Authorization: string;\n}\n\nconst RegisterComponent = () => {\n  const [username, setUsername] = React.useState<string>(\"\");\n  const [password, setPassword] = React.useState<string>(\"\");\n  const history = useHistory();\n\n  const usernameChangeHandler = (\n    event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>\n  ) => {\n    setUsername(event.target.value);\n  };\n  const passwordChangeHandler = (\n    event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>\n  ) => {\n    setPassword(event.target.value);\n  };\n\n  const registerUser = async (\n    username: string,\n    password: string\n  ): Promise<RegisterResponse | undefined> => {\n    try {\n      const response: Response = await fetch(SERVER_BASE_URL + \"/user/\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          email: username,\n          password: password,\n          username: username,\n          public_id: username,\n        }),\n      });\n      const registerResponse: RegisterResponse = await response.json();\n      return registerResponse;\n    } catch (error) {\n      console.warn(error.message);\n    } finally {\n      console.log(\"Login Function finished\");\n    }\n  };\n\n  const submitHandler = (\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>\n  ) => {\n    console.log(username + \" \" + password);\n    registerUser(username, password)\n      .then((registerResponse: RegisterResponse | undefined) => {\n        if (registerResponse) {\n          sessionStorage.setItem(JWT_TOKEN, registerResponse.Authorization);\n          sessionStorage.setItem(USERNAME_KEY, username);\n          console.log(registerResponse.message);\n        }\n      })\n      .finally(() => {\n        history.push(\"/registerqr\");\n      });\n  };\n  const checkIfRegistered = async (token: string) => {\n    try {\n      const res = await fetch(SERVER_BASE_URL + \"/qrcode/checkifregister\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: \"Bearer \" + token,\n        },\n      });\n      return await res.status;\n    } catch (error) {\n      console.warn(error);\n    }\n  };\n\n  return (\n    <>\n      <TextField label='Username' onChange={usernameChangeHandler} />\n      <TextField\n        label='Password'\n        onChange={passwordChangeHandler}\n        type='password'\n      />\n      <Button onClick={submitHandler}>Register</Button>\n    </>\n  );\n};\n\nexport default RegisterComponent;\n","/Users/slx/Documents/GitHub/2faqrweb/src/components/loginqr.tsx",[],"/Users/slx/Documents/GitHub/2faqrweb/src/components/registerQR.tsx",[],"/Users/slx/Documents/GitHub/2faqrweb/src/reportWebVitals.ts",[],["49","50"],"/Users/slx/Documents/GitHub/2faqrweb/src/config.ts",[],"/Users/slx/Documents/GitHub/2faqrweb/src/constants.ts",[],"/Users/slx/Documents/GitHub/2faqrweb/src/components/home.tsx",[],{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":2,"column":10,"nodeType":"57","messageId":"58","endLine":2,"endColumn":20},{"ruleId":"55","severity":1,"message":"59","line":69,"column":9,"nodeType":"57","messageId":"58","endLine":69,"endColumn":26},{"ruleId":"51","replacedBy":"60"},{"ruleId":"53","replacedBy":"61"},"no-native-reassign",["62"],"no-negated-in-lhs",["63"],"@typescript-eslint/no-unused-vars","'Typography' is defined but never used.","Identifier","unusedVar","'checkIfRegistered' is assigned a value but never used.",["62"],["63"],"no-global-assign","no-unsafe-negation"]